datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String? @unique
  phone    String?
  password String

  // Add these fields for password reset functionality
  resetToken    String? // Optional field for reset token
  resetTokenExp DateTime? // Optional field for reset token expiry

  Review    Review[] @relation("UserReview")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
}

// model User {
//   id       Int      @id @default(autoincrement())
//   email    String   @unique
//   password String
//   name     String?  // Optional field
//   phonets  String?  // Optional field
// }

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  user      User     @relation("UserReview", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Checkout {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  companyName    String?
  streetAddress  String
  city           String
  province       String
  zipCode        String
  phone          String
  emailAddress   String
  additionalInfo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cart           Cart?    @relation(fields: [cartId], references: [id])
  cartId         Int?
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Checkout  Checkout[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  productId Int
  quantity  Int
  price     Float
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  subtotal  Float
}

// products model

model Product {
  id           Int                 @id @default(autoincrement())
  title        String
  price        Float
  description  String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  cartItems    CartItem[]
  images       ProductImage[]
  sizes        ProductSize[]
  colors       ProductColor[]
  comparisonsA ProductComparison[] @relation("ProductA")
  comparisonsB ProductComparison[] @relation("ProductB")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String // URL or path to the image
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  size      String // e.g., "Small", "Medium", "Large", etc.
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductColor {
  id        Int     @id @default(autoincrement())
  color     String // e.g., "Red", "Blue", "Green", etc.
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// products model

model ProductComparison {
  id         Int      @id @default(autoincrement())
  productAId Int
  productBId Int
  createdAt  DateTime @default(now())
  productA   Product  @relation("ProductA", fields: [productAId], references: [id], onDelete: Cascade)
  productB   Product  @relation("ProductB", fields: [productBId], references: [id], onDelete: Cascade)
}

model Pagination {
  id         Int      @id @default(autoincrement())
  pageNumber Int
  pageSize   Int
  createdAt  DateTime @default(now())
}
